import os
import sqlite3
from prometheus_client import Counter, Histogram, Gauge, Info, CollectorRegistry, generate_latest, multiprocess
from flask import current_app
import psutil
import time
from typing import Dict, Any
from datetime import datetime

class MetricsService:
    """Prometheus 메트릭 수집 서비스"""
    
    def __init__(self):
        metrics_dir = os.environ.get('PROMETHEUS_MULTIPROC_DIR')
        if metrics_dir and not os.path.exists(metrics_dir):
            os.makedirs(metrics_dir)
            
        registry = CollectorRegistry()
        multiprocess.MultiProcessCollector(registry)
        self.registry = registry
        
        self.trading_signals_generated = Counter(
            'trading_signals_generated_total',
            'Total trading signals generated by AI',
            ['symbol', 'signal', 'model_type'],
            registry=self.registry
        )
        
        self.trades_executed = Counter(
            'trades_executed_total',
            'Total trades executed',
            ['symbol', 'side', 'status'],
            registry=self.registry
        )
        
        self.ai_predictions_made = Counter(
            'ai_predictions_made_total',
            'Total AI predictions made',
            ['symbol', 'model_type'],
            registry=self.registry
        )
        
        self.ai_confidence_histogram = Histogram(
            'ai_confidence_distribution',
            'Distribution of AI prediction confidence',
            ['symbol'],
            buckets=[0.0, 0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
            registry=self.registry
        )
        
        self.portfolio_value = Gauge(
            'portfolio_value_usd',
            'Current portfolio value in USD',
            registry=self.registry
        )
        
        self.position_count = Gauge(
            'active_positions_count',
            'Number of active positions',
            registry=self.registry
        )
        
        self.daily_pnl = Gauge(
            'daily_pnl_percent',
            'Daily profit/loss percentage',
            registry=self.registry
        )
        
        self.total_trades_today = Gauge(
            'total_trades_today',
            'Total number of trades executed today',
            registry=self.registry
        )
        
        self.model_training_duration = Histogram(
            'model_training_duration_seconds',
            'Time taken to train models',
            ['symbol', 'model_type'],
            registry=self.registry
        )
        
        self.celery_task_duration = Histogram(
            'celery_task_duration_seconds',
            'Celery task execution duration',
            ['task_name'],
            registry=self.registry
        )
        
        self.celery_tasks_total = Counter(
            'celery_tasks_total',
            'Total Celery tasks',
            ['task_name', 'status'],
            registry=self.registry
        )
        
        self.system_memory_usage = Gauge(
            'system_memory_usage_percent',
            'System memory usage percentage',
            registry=self.registry
        )
        
        self.system_cpu_usage = Gauge(
            'system_cpu_usage_percent',
            'System CPU usage percentage',
            registry=self.registry
        )
        
        self.successful_trades = Counter(
            'successful_trades_total',
            'Total successful trades',
            ['symbol', 'side'],
            registry=self.registry
        )
        
        self.failed_trades = Counter(
            'failed_trades_total',
            'Total failed trades',
            ['symbol', 'side', 'reason'],
            registry=self.registry
        )
        
        self.trade_pnl_histogram = Histogram(
            'trade_pnl_distribution',
            'Distribution of trade P&L',
            ['symbol'],
            buckets=[-0.1, -0.05, -0.02, 0.0, 0.02, 0.05, 0.1, 0.2],
            registry=self.registry
        )
    
    def record_trading_signal(self, symbol: str, signal: str, model_type: str = 'ensemble', confidence: float = 0.0):
        self.trading_signals_generated.labels(symbol=symbol, signal=signal, model_type=model_type).inc()
        if confidence > 0:
            self.ai_confidence_histogram.labels(symbol=symbol).observe(confidence)
        current_app.logger.debug(f"메트릭: 시그널 {symbol} {signal} (신뢰도: {confidence:.3f})")
    
    def record_trade_execution(self, symbol: str, side: str, status: str, pnl: float = None):
        self.trades_executed.labels(symbol=symbol, side=side, status=status).inc()        
        if status == 'success':
            self.successful_trades.labels(symbol=symbol, side=side).inc()
        else:
            self.failed_trades.labels(symbol=symbol, side=side, reason=status).inc()
        if pnl is not None:
            self.trade_pnl_histogram.labels(symbol=symbol).observe(pnl)
        
        current_app.logger.debug(f"메트릭: 거래 {symbol} {side} {status}")
    
    def record_ai_prediction(self, symbol: str, model_type: str, confidence: float):
        self.ai_predictions_made.labels(symbol=symbol, model_type=model_type).inc()
        self.ai_confidence_histogram.labels(symbol=symbol).observe(confidence)
        current_app.logger.debug(f"메트릭: AI 예측 {symbol} {model_type} (신뢰도: {confidence:.3f})")
    
    def update_portfolio_metrics(self, portfolio_value: float, position_count: int, daily_pnl: float = None, trades_today: int = 0):
        self.portfolio_value.set(portfolio_value)
        self.position_count.set(position_count)
        self.total_trades_today.set(trades_today)
        
        if daily_pnl is not None:
            self.daily_pnl.set(daily_pnl * 100)
        
        current_app.logger.debug(f"메트릭: 포트폴리오 ${portfolio_value:.2f}, 포지션 {position_count}개, 일일 거래 {trades_today}회")
    
    def record_celery_task(self, task_name: str, status: str, duration: float = None):
        self.celery_tasks_total.labels(task_name=task_name, status=status).inc()
        if duration is not None:
            self.celery_task_duration.labels(task_name=task_name).observe(duration)
    
    def record_api_request(self, endpoint: str, method: str, status_code: int, duration: float):
        self.api_requests_total.labels(endpoint=endpoint, method=method, status_code=str(status_code)).inc()
        self.api_request_duration.labels(endpoint=endpoint).observe(duration)
    
    def update_system_metrics(self):
        try:
            memory = psutil.virtual_memory()
            self.system_memory_usage.set(memory.percent)
            
            cpu_percent = psutil.cpu_percent(interval=1)
            self.system_cpu_usage.set(cpu_percent)
            
            current_app.logger.debug(f"시스템 메트릭: Memory {memory.percent:.1f}%, CPU {cpu_percent:.1f}%")
        except Exception as e:
            current_app.logger.error(f"시스템 메트릭 수집 오류: {e}")
    
    def get_metrics(self) -> str:
        return generate_latest(self.registry).decode('utf-8')

metrics_service = None

def get_metrics_service() -> MetricsService:
    global metrics_service
    if metrics_service is None:
        metrics_service = MetricsService()
    return metrics_service